@using Adrack.Service.Helpers
@model RegisterModel

@{
    Layout = "~/Views/Shared/_Master.Page.Layout.cshtml";

    Html.AddPageTitle(T("PageTitle.Register").Text);

    Html.AppendPageScript(PageLayoutPosition.Body, "~/Scripts/core/library/jquery_ui/core.min.js".ToLowerInvariant());
    Html.AppendPageScript(PageLayoutPosition.Body, "~/Scripts/plugins/form.min.js".ToLowerInvariant());
    Html.AppendPageScript(PageLayoutPosition.Body, "~/Scripts/plugins/form.wizard.min.js".ToLowerInvariant());

    Html.AppendPageScript(PageLayoutPosition.Body, "~/Scripts/plugins/select2.min.js".ToLowerInvariant());
    Html.AppendPageScript(PageLayoutPosition.Body, "~/Scripts/plugins/uniform.min.js".ToLowerInvariant());
    Html.AppendPageScript(PageLayoutPosition.Body, "~/Scripts/plugins/blockui.min.js".ToLowerInvariant());
    Html.AppendPageScript(PageLayoutPosition.Body, "~/Scripts/core/library/jasny.bootstrap.min.js".ToLowerInvariant());
    Html.AppendPageScript(PageLayoutPosition.Body, "~/Scripts/plugins/validate.min.js".ToLowerInvariant());

    Html.AppendPageScript(PageLayoutPosition.Body, "~/Scripts/plugins/ui/moment/moment.min.js".ToLowerInvariant());
    Html.AppendPageScript(PageLayoutPosition.Body, "~/Scripts/plugins/pickers/pickadate/picker.js".ToLowerInvariant());
    Html.AppendPageScript(PageLayoutPosition.Body, "~/Scripts/plugins/pickers/pickadate/picker.date.js".ToLowerInvariant());
    Html.AppendPageScript(PageLayoutPosition.Body, "~/Scripts/plugins/pickers/daterangepicker.js".ToLowerInvariant());

    //Html.AppendPageScript(PageLayoutPosition.Body, string.Format("~/Scripts/core/domain/membership/register.js").ToLowerInvariant());
    Html.AppendPageCustom(PageLayoutPosition.ContainerAttribute, "login-container");

    var wizardCount = 1;
}

<script type="text/javascript">

    $(function() {
        $('#generate-pass-btn').on('click',
            function() {
                $('#user-password').val(Password.generate(8));
            });
    });

    function initAjaxCallStep() {
        var remoteAjax = {};

        remoteAjax["step0"] = {
            url: "@(Url.RouteUrl("validate"))", // the url which stores the stuff in db for each step
            dataType: 'json',
            data: { email: '@Model.ValidationEmail' },
            beforeSubmit: function(data) {
                $("#validation-status").css("color", "orange");
                $("#validation-status").html("Please wait. Validating the code...");
                $("#validation-status").show();
            },
            success: function(data) {

                if (data.result
                ) { //data is either true or false (returned from store_in_database.html) simulating successful / failing store
                    $("#validation-status").css("color", "green");
                    $("#validation-status").html("Code succesfully validated");
                } else {
                    $("#validation-status").css("color", "red");
                    $("#validation-status").html("Validation error");
                }

                $("#validation-status").show();

                return data.result; //return true to make the wizard move to the next step, false will cause the wizard to stay on the CV step (change this in store_in_database.html)
            }
        };

        return remoteAjax;
    }
</script>

@if (Model.CountryEnabled && Model.StateProvinceEnabled)
{
    <script type="text/javascript">
        $(function() {

            $('#apply-pass-btn').on('click',
                function() {
                    $('#Password').val($('#user-password').val());
                    $('#ConfirmPassword').val($('#user-password').val());
                    $('#modal_generate_pass').modal('hide');
                });

            $('#resend-validation-mesage').click(function(event) {
                event.preventDefault();

                $.ajax({
                    cache: false,
                    type: "POST",
                    url: "@(Url.RouteUrl("Validate"))",
                    data: { name: '@Model.Name', email: '@Model.ValidationEmail', resend: true },
                    success: function(data) {

                    },
                    error: function(xhr, ajaxOptions, thrownError) {
                    }
                });

                return false;
            });

            var remoteAjax = undefined;

            @if (Model.ValidateFromCode)
            {
                @: remoteAjax = initAjaxCallStep();
            }

            $("#@Html.FieldIdFor(x => x.CountryId)").change(function() {
                var selectedItem = $(this).val();

                var ddlStates = $("#@Html.FieldIdFor(x => x.StateProvinceId)");

                var statesProgress = $("#states-loading-progress");
                statesProgress.show();
                $.ajax({
                    cache: false,
                    type: "GET",
                    url: "@(Url.RouteUrl("GetStateProvinceByCountryId"))",
                    data: { "countryId": selectedItem, "addSelectStateProvinceItem": "true" },
                    success: function(data) {
                        ddlStates.html('');
                        $.each(data,
                            function(id, option) {
                                if (option.id == 0) option.id = "";
                                ddlStates.append($('<option></option>').val(option.id).html(option.name));
                            });
                        statesProgress.hide();
                    },
                    error: function(xhr, ajaxOptions, thrownError) {
                        statesProgress.hide();
                    }
                });
            });

            $(".form-validation").formwizard({
                disableUIStyles: true,
                validationEnabled: true,
                inDuration: 150,
                outDuration: 150,
                remoteAjax: remoteAjax,
                validationOptions: {
                    ignore: 'input[type=hidden], .select2-search__field', // ignore hidden fields
                    errorClass: 'validation-error-label',
                    successClass: 'validation-valid-label',
                    highlight: function(element, errorClass) {
                        $(element).removeClass(errorClass);
                    },
                    unhighlight: function(element, errorClass) {
                        $(element).removeClass(errorClass);
                    },

                    // Different components require proper error label placement
                    errorPlacement: function(error, element) {

                        // Styled checkboxes, radios, bootstrap switch
                        if (element.parents('div').hasClass("checker") ||
                            element.parents('div').hasClass("choice") ||
                            element.parent().hasClass('bootstrap-switch-container')) {
                            if (element.parents('label').hasClass('checkbox-inline') ||
                                element.parents('label').hasClass('radio-inline')) {
                                error.appendTo(element.parent().parent().parent().parent());
                            } else {
                                error.appendTo(element.parent().parent().parent().parent().parent());
                            }
                        }
                        // Unstyled checkboxes, radios
                        else if (element.parents('div').hasClass('checkbox') ||
                            element.parents('div').hasClass('radio')) {
                            error.appendTo(element.parent().parent().parent());
                        }
                        // Input with icons and Select2
                        else if (element.parents('div').hasClass('has-feedback') ||
                            element.hasClass('select2-hidden-accessible')) {
                            error.appendTo(element.parent());
                        }
                        // Inline checkboxes, radios
                        else if (element.parents('label').hasClass('checkbox-inline') ||
                            element.parents('label').hasClass('radio-inline')) {
                            error.appendTo(element.parent().parent());
                        }
                        // Input group, styled file input
                        else if (element.parent().hasClass('uploader') || element.parents().hasClass('input-group')) {
                            error.appendTo(element.parent().parent());
                        } else {
                            error.insertAfter(element);
                        }
                    },
                    rules: {
                        Email: {
                            email: true
                        },
                        Password: {
                            minlength: 8,
                            maxlength: 30
                        },
                        ConfirmPassword: {
                            minlength: 8,
                            equalTo: "#Password"
                        }
                    }
                }
            });

            $('.select').select2();

            $('.styled').uniform({
                radioClass: 'choice'
            });
        });
    </script>
}

@using (Html.BeginForm(null, null, FormMethod.Post, new {@class = "form-validation", novalidate = ""}))
{
    @Html.AntiForgeryToken()

    <div class="row">
    <div class="col-lg-12">
    <div class="panel registration-form">
    <div class="panel-body">
    <div class="text-center">
        <div class="icon-object border-success text-success">
            <i class="icon-plus3"></i>
        </div>
        <h5 class="content-group-lg">
            @if (Model.UserTypeId == SharedData.AffiliateUserTypeId)
            {
                @Html.Raw("Create affiliate user")
            }
            else if (Model.UserTypeId == SharedData.BuyerUserTypeId)
            {
                @Html.Raw("Create buyer user")
            }
            else if (Model.UserTypeId == SharedData.BuiltInUserTypeId)
            {
                @Html.Raw("Create system user")
            }
            <small class="display-block">All fields are required</small>
        </h5>
    </div>

    @if (Model.ValidateFromCode)
    {
        <fieldset class="step" id="step0">
            <h6 class="form-wizard-title text-semibold">
                <span class="form-wizard-count">@(wizardCount++)</span>
                Email validation
                <small class="display-block">
                    <span style="color: red">Enter validation code from email sent to you</span>
                </small>
            </h6>

            <div class="row">
                <div class="col-md-12">
                    <div class="form-group has-feedback">
                        @Html.LabelFor(x => x.ValidationCode)
                        @Html.TextBoxFor(x => x.ValidationCode, new {@class = "form-control", tabindex = 1, placeholder = "Validation code", required = "required"})
                        <div class="form-control-feedback">
                            <i class="icon-user-plus text-muted"></i>
                        </div>
                    </div>

                    <div style="color: red; display: none" id="validation-status"></div>

                    <a href="#" class="btn btn-default" id="resend-validation-mesage">Resend validation code</a>
                </div>
            </div>
        </fieldset>
    }

    @if (Model.UserTypeId != SharedData.BuiltInUserTypeId && Model.ParentId == 0)
    {
        <fieldset class="step" id="step1">
            <h6 class="form-wizard-title text-semibold">
                <span class="form-wizard-count">@(wizardCount++)</span>
                @if (Model.UserTypeId == SharedData.AffiliateUserTypeId)
                {
                    <span>Affiliate info</span>
                    <small class="display-block">"Fill affiliate info"</small>
                }
                else if (Model.UserTypeId == SharedData.BuyerUserTypeId)
                {
                    <span>Buyer info</span>
                    <small class="display-block">"Fill buyer info"</small>
                }
                else
                {
                    <span>Member info</span>
                    <small class="display-block">"Fill member info"</small>
                }
            </h6>

            <div class="row">
                <div class="col-md-12">
                    <div class="form-group has-feedback">
                        @Html.LabelFor(x => x.Name)
                        @Html.TextBoxFor(x => x.Name, new {@class = "form-control", tabindex = 1, placeholder = "Affiliate name", required = "required"})
                        <div class="form-control-feedback">
                            <i class="icon-user-plus text-muted"></i>
                        </div>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-md-4">
                    <div class="form-group has-feedback">
                        @Html.LabelFor(x => x.AddressLine1)
                        @Html.TextBoxFor(x => x.AddressLine1, new {@class = "form-control", autofocus = "autofocus", tabindex = 1, placeholder = "Address line1", required = "required"})
                        <div class="form-control-feedback">
                            <i class="icon-user-plus text-muted"></i>
                        </div>
                    </div>
                </div>

                <div class="col-md-4">
                    <div class="form-group has-feedback">
                        @Html.LabelFor(x => x.AddressLine2)
                        @Html.TextBoxFor(x => x.AddressLine2, new {@class = "form-control", autofocus = "autofocus", tabindex = 1, placeholder = "Address line2"})
                        <div class="form-control-feedback">
                            <i class="icon-user-plus text-muted"></i>
                        </div>
                    </div>
                </div>

                <div class="col-md-4">
                    <div class="form-group has-feedback">
                        @Html.LabelFor(x => x.Website)
                        @Html.TextBoxFor(x => x.Website, new {@class = "form-control", autofocus = "autofocus", tabindex = 1, placeholder = "Website", required = "required"})
                        <div class="form-control-feedback">
                            <i class="icon-user-plus text-muted"></i>
                        </div>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-md-3">
                    <div class="form-group has-feedback">
                        @Html.LabelFor(x => x.City)
                        @Html.TextBoxFor(x => x.City, new {@class = "form-control", autofocus = "autofocus", tabindex = 1, placeholder = "City", required = "required"})
                        <div class="form-control-feedback">
                            <i class="icon-user-plus text-muted"></i>
                        </div>
                    </div>
                </div>

                <div class="col-md-3">
                    <div class="form-group has-feedback">
                        @Html.Label("Zip code")<br />
                        @Html.TextBoxFor(x => x.ZipPostalCode, new {@class = "form-control", tabindex = 1, placeholder = "Zip postal code", required = "required"})
                        <div class="form-control-feedback">
                            <i class="icon-user-plus text-muted"></i>
                        </div>
                    </div>
                </div>

                <div class="col-md-3">
                    <div class="form-group has-feedback">
                        @Html.LabelFor(x => x.CompanyPhone)
                        @Html.TextBoxFor(x => x.CompanyPhone, new {@class = "form-control", tabindex = 1, placeholder = "Telephone", required = "required"})
                        <div class="form-control-feedback">
                            <i class="icon-user-plus text-muted"></i>
                        </div>
                    </div>
                </div>

                <div class="col-md-3">
                    <div class="form-group has-feedback">
                        @Html.LabelFor(x => x.CompanyEmail)
                        @Html.TextBoxFor(x => x.CompanyEmail, new {@class = "form-control", tabindex = 1, placeholder = "Company email", required = "required", type = "email"})
                        <div class="form-control-feedback">
                            <i class="icon-user-plus text-muted"></i>
                        </div>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-md-6">
                    <div class="form-group has-feedback">
                        @Html.LabelFor(x => x.CountryId)<br />
                        @Html.DropDownList("CountryId", Model.ListCountry, new {@class = "select", required = "required"})
                    </div>
                </div>

                <div class="col-md-6">
                    <div class="form-group has-feedback">
                        @Html.LabelFor(x => x.StateProvinceId)<br />
                        @Html.DropDownList("StateProvinceId", Model.ListStateProvince, new {@class = "select", required = "required"})
                    </div>
                </div>
            </div>

            <div class="form-group">
                <div class="checkbox">
                    <label>
                        <input type="checkbox" class="styled" checked="checked">
                        Send me <a href="#">test account settings</a>
                    </label>
                </div>

                <div class="checkbox">
                    <label>
                        <input type="checkbox" class="styled" checked="checked">
                        Subscribe to monthly newsletter
                    </label>
                </div>

                <div class="checkbox">
                    <label>
                        <input type="checkbox" class="styled">
                        Accept <a href="#">terms of service</a>
                    </label>
                </div>
            </div>
        </fieldset>
    }

    <fieldset class="step" id="step2">
        <h6 class="form-wizard-title text-semibold">
            <span class="form-wizard-count">@(wizardCount++)</span>
            User info
            <small class="display-block">Tell us a bit about yourself</small>
        </h6>

        <div class="row">
            <div class="col-md-4">
                <div class="form-group has-feedback">
                    @Html.LabelFor(x => x.Email)
                    @Html.TextBoxFor(x => x.Email, new { @class = "form-control", autofocus = "autofocus", tabindex = 1, placeholder = "Choose username", required = "required", type = "email" })
                    <div class="form-control-feedback">
                        <i class="icon-user-plus text-muted"></i>
                    </div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="form-group has-feedback">
                    @Html.Label("Contact email")<br />
                    @Html.TextBoxFor(x => x.ContactEmail, new { @class = "form-control", autofocus = "autofocus", tabindex = 1, placeholder = "Choose contact email", type = "email" })
                    <div class="form-control-feedback">
                        <i class="icon-user-plus text-muted"></i>
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-4">
                <div class="form-group has-feedback">
                    @Html.LabelFor(x => x.FirstName)
                    @Html.TextBoxFor(x => x.FirstName, new {@class = "form-control", autofocus = "autofocus", tabindex = 1, placeholder = "First name", required = "required"})
                    <div class="form-control-feedback">
                        <i class="icon-user-check text-muted"></i>
                    </div>
                </div>
            </div>

            <div class="col-md-4">
                <div class="form-group has-feedback">
                    @Html.LabelFor(x => x.LastName)
                    @Html.TextBoxFor(x => x.LastName, new {@class = "form-control", autofocus = "autofocus", tabindex = 1, placeholder = "Last name", required = "required"})
                    <div class="form-control-feedback">
                        <i class="icon-user-plus text-muted"></i>
                    </div>
                </div>
            </div>

            <div class="col-md-4">
                <div class="form-group has-feedback">
                    @Html.LabelFor(x => x.MiddleName)
                    @Html.TextBoxFor(x => x.MiddleName, new {@class = "form-control", autofocus = "autofocus", tabindex = 1, placeholder = "Middle name"})
                    <div class="form-control-feedback">
                        <i class="icon-user-check text-muted"></i>
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-md-4">
                <div class="form-group has-feedback">
                    @Html.LabelFor(x => x.Phone)
                    @Html.TextBoxFor(x => x.Phone, new {@class = "form-control", autofocus = "autofocus", tabindex = 1, placeholder = "Phone", required = "required"})
                    <div class="form-control-feedback">
                        <i class="icon-user-check text-muted"></i>
                    </div>
                </div>
            </div>

            <div class="col-md-4">
                <div class="form-group has-feedback">
                    @Html.LabelFor(x => x.CellPhone)
                    @Html.TextBoxFor(x => x.CellPhone, new {@class = "form-control", autofocus = "autofocus", tabindex = 1, placeholder = "Cell phone", required = "required"})
                    <div class="form-control-feedback">
                        <i class="icon-user-plus text-muted"></i>
                    </div>
                </div>
            </div>

            <div class="col-md-4">
                <div class="form-group has-feedback">
                    @Html.LabelFor(x => x.TimeZone)
                    @Html.DropDownList("TimeZone", Model.TimeZones, new {@class = "select"})
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-md-5">
                <div class="form-group has-feedback">
                    @Html.LabelFor(x => x.Password)
                    @Html.TextBoxFor(x => x.Password, new {@class = "form-control", tabindex = 1, placeholder = "Password", required = "required", type = "password"})
                    <div class="form-control-feedback">
                        <i class="icon-user-lock text-muted"></i>
                    </div>
                </div>
                @{ Html.RenderAction("PasswordStrength", "Membership", new {id = "Password"}); }
            </div>

            <div class="col-md-5">
                <div class="form-group has-feedback">
                    @Html.LabelFor(x => x.ConfirmPassword)
                    @Html.TextBoxFor(x => x.ConfirmPassword, new {@class = "form-control", tabindex = 1, placeholder = "Confirm password", required = "required", type = "password"})
                    <div class="form-control-feedback">
                        <i class="icon-user-lock text-muted"></i>
                    </div>
                </div>
            </div>

            <div class="col-md-2">
                <div class="form-group has-feedback" style="margin-top: 30px">
                    <label></label>
                    <a data-toggle="modal" data-target="#modal_generate_pass">Generate</a>
                </div>
            </div>
        </div>

        <div class="row">
            @{
                var isGlobalAdmin = false;
                var n = "12";

                if (Model.LoggedInUser != null)
                {
                    var role = (from x in Model.LoggedInUser.Roles
                        where x.Id == 1
                        select x).FirstOrDefault();

                    isGlobalAdmin = role != null;

                    if (isGlobalAdmin)
                    {
                        n = "6";
                    }
                    ;
                }
            }
            @if (isGlobalAdmin)
            {
                <div class="col-md-6">
                    <div class="form-group has-feedback">
                        @Html.Label("User role")<br />
                        @Html.DropDownList("UserRoleId", Model.ListUserRole, new {@class = "select", required = "required"})
                    </div>
                </div>
            }
        </div>

        @if (Model.UserTypeId == SharedData.BuiltInUserTypeId)
        {
            <div class="row">
                <div class="col-md-12">
                    <div class="form-group has-feedback">
                        @Html.LabelFor(x => x.Comment)
                        @Html.TextAreaFor(x => x.Comment, new {@class = "form-control", tabindex = 1, placeholder = "Note"})
                        <div class="form-control-feedback">
                            <i class="icon-mention text-muted"></i>
                        </div>
                    </div>
                </div>
            </div>
        }
    </fieldset>

    <div style="color: red">
        @Html.ValidationSummary()
    </div>

    <div class="form-wizard-actions">
        @Html.HiddenFor(x => x.UserRoleId)
        @Html.HiddenFor(x => x.UserTypeId)
        @Html.HiddenFor(x => x.ParentId)
        <input class="btn btn-default" id="validation-back" value="Back" type="reset">
        <input class="btn btn-info" id="validation-next" value="Next" type="submit" onclick="if ($(this).val() == 'Submit') return validatePassword();return true;">
    </div>
    </div>
    </div>
    </div>
    </div>
}

@if (Model.DisplayCaptcha)
{
    <br />
    <div>
        @Html.Raw(Html.GenerateCaptcha())
    </div>
}

<div id="modal_generate_pass" class="modal fade">
    <div class="modal-dialog modal-xs">
        <div class="modal-content">

            <div class="modal-header bg-info">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h5 class="modal-title">Generate password</h5>
            </div>

            <div class="modal-body">
                <div class="row">
                    <div class="col-sm-12">
                        <input class="form-control" type="text" id="user-password" />
                    </div>
                </div>

                <div class="row">
                    <div class="col-sm-6">
                        <button class="form-control btn btn-info" id="generate-pass-btn">Generate</button>
                    </div>
                    <div class="col-sm-6">
                        <button class="form-control btn btn-info" id="apply-pass-btn">Apply</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>