@model Adrack.Web.ContentManagement.Models.Lead.AffiliateModel

@using Adrack.Service.Helpers

@{
    // Layout = "~/Views/Shared/_Master.Page.Layout.cshtml";

    Html.AddPageTitle(T("PageTitle.Register").Text);

    Html.AppendPageScript(PageLayoutPosition.Body, string.Format("~/Scripts/core/library/jquery_ui/core.min.js").ToLowerInvariant());
    Html.AppendPageScript(PageLayoutPosition.Body, string.Format("~/Scripts/plugins/form.min.js").ToLowerInvariant());
    Html.AppendPageScript(PageLayoutPosition.Body, string.Format("~/Scripts/plugins/form.wizard.min.js").ToLowerInvariant());
    Html.AppendPageScript(PageLayoutPosition.Body, string.Format("~/Scripts/plugins/select2.min.js").ToLowerInvariant());
    Html.AppendPageScript(PageLayoutPosition.Body, string.Format("~/Scripts/plugins/uniform.min.js").ToLowerInvariant());
    Html.AppendPageScript(PageLayoutPosition.Body, string.Format("~/Scripts/plugins/blockui.min.js").ToLowerInvariant());
    Html.AppendPageScript(PageLayoutPosition.Body, string.Format("~/Scripts/core/library/jasny.bootstrap.min.js").ToLowerInvariant());
    Html.AppendPageScript(PageLayoutPosition.Body, string.Format("~/Scripts/plugins/validate.min.js").ToLowerInvariant());

    Html.AppendPageScript(PageLayoutPosition.Body, string.Format("~/Scripts/plugins/ui/moment/moment.min.js").ToLowerInvariant());

    Html.AppendPageScript(PageLayoutPosition.Body, string.Format("~/Scripts/plugins/pickers/pickadate/picker.js").ToLowerInvariant());
    Html.AppendPageScript(PageLayoutPosition.Body, string.Format("~/Scripts/plugins/pickers/pickadate/picker.date.js").ToLowerInvariant());
    Html.AppendPageScript(PageLayoutPosition.Body, string.Format("~/Scripts/plugins/pickers/daterangepicker.js").ToLowerInvariant());

    //Html.AppendPageScript(PageLayoutPosition.Body, string.Format("~/Scripts/core/domain/membership/register.js").ToLowerInvariant());
    Html.AppendPageCustom(PageLayoutPosition.ContainerAttribute, "login-container");

    var currentUser = this.AppContext.AppUser;
}

    <script type="text/javascript">
    $(function () {
            $("#@Html.FieldIdFor(x => x.CountryId)").change(function () {
            var selectedItem = $(this).val();

            var ddlStates = $("#@Html.FieldIdFor(x => x.StateProvinceId)");

            var statesProgress = $("#states-loading-progress");
            statesProgress.show();
            $.ajax({
                cache: false,
                type: "GET",
                url: "@(Url.RouteUrl("GetStateProvinceByCountryId"))",
                data: { "countryId": selectedItem, "addSelectStateProvinceItem": "true" },
                success: function (data) {
                    ddlStates.html('');
                    $.each(data, function (id, option) {
                        if (option.id == 0) option.id = "";
                        ddlStates.append($('<option></option>').val(option.id).html(option.name));
                    });
                    statesProgress.hide();
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    statesProgress.hide();
                }
            });
        });

        $(".form-validation").formwizard({
            disableUIStyles: true,
            validationEnabled: true,
            inDuration: 150,
            outDuration: 150,
            validationOptions: {
                ignore: 'input[type=hidden], .select2-search__field', // ignore hidden fields
                errorClass: 'validation-error-label',
                successClass: 'validation-valid-label',
                highlight: function (element, errorClass) {
                    $(element).removeClass(errorClass);
                },
                unhighlight: function (element, errorClass) {
                    $(element).removeClass(errorClass);
                },

                // Different components require proper error label placement
                errorPlacement: function (error, element) {

                    // Styled checkboxes, radios, bootstrap switch
                    if (element.parents('div').hasClass("checker") || element.parents('div').hasClass("choice") || element.parent().hasClass('bootstrap-switch-container')) {
                        if (element.parents('label').hasClass('checkbox-inline') || element.parents('label').hasClass('radio-inline')) {
                            error.appendTo(element.parent().parent().parent().parent());
                        }
                        else {
                            error.appendTo(element.parent().parent().parent().parent().parent());
                        }
                    }

                        // Unstyled checkboxes, radios
                    else if (element.parents('div').hasClass('checkbox') || element.parents('div').hasClass('radio')) {
                        error.appendTo(element.parent().parent().parent());
                    }

                        // Input with icons and Select2
                    else if (element.parents('div').hasClass('has-feedback') || element.hasClass('select2-hidden-accessible')) {
                        error.appendTo(element.parent());
                    }

                        // Inline checkboxes, radios
                    else if (element.parents('label').hasClass('checkbox-inline') || element.parents('label').hasClass('radio-inline')) {
                        error.appendTo(element.parent().parent());
                    }

                        // Input group, styled file input
                    else if (element.parent().hasClass('uploader') || element.parents().hasClass('input-group')) {
                        error.appendTo(element.parent().parent());
                    }

                    else {
                        error.insertAfter(element);
                    }
                },
                rules: {
                    Email: {
                        email: true
                    },
                    Password: {
                        minlength: 8
                    },
                    ConfirmPassword: {
                        minlength: 8,
                        equalTo: "#Password"
                    }
                }
            }
        });

        var dtNow = new Date('@Adrack.Web.ContentManagement.Helper.GetTimeZoneStr()');
        $('.daterange-single').daterangepicker({
            singleDatePicker: true,
            startDate: moment(dtNow),
            maxDate: moment(dtNow),
            locale: {
                format: 'MM/DD/YYYY'
            }
        });

        $('.select').select2();

        $('.styled').uniform({
            radioClass: 'choice'
        });
    });
    </script>

@using (Html.BeginForm(null, null, FormMethod.Post, new { @class = "form-validation" }))
{
    @Html.AntiForgeryToken()

    <div class="row">
        <div class="col-lg-12">
            <div class="panel registration-form">
                <div class="panel-body">
                    <div class="text-center">
                        <h5 class="content-group-lg">
                        @if (Model.UserTypeId == SharedData.AffiliateUserTypeId)
                        {
                            @Html.Raw("Create affiliate")
                        }
                        else if (Model.UserTypeId == SharedData.BuyerUserTypeId)
                        {
                            @Html.Raw("Create buyer")
                        }
                        else
                            if (Model.UserTypeId == SharedData.BuiltInUserTypeId)
                            {
                                @Html.Raw("Create system user")
                            }
                        <small class="display-block">All fields are required</small></h5>
                    </div>

                    @if (Model.UserTypeId != SharedData.BuiltInUserTypeId && Model.ParentId == 0)
                    {
                        <fieldset class="step" id="step1">
                            <h6 class="form-wizard-title text-semibold">
                                <span class="form-wizard-count">1</span>
                                @if (Model.UserTypeId == SharedData.AffiliateUserTypeId)
                                {
                                    <span>Affiliate info</span>
                                    <small class="display-block">"Fill affiliate info"</small>
                                }
                                else if (Model.UserTypeId == SharedData.BuyerUserTypeId)
                                {
                                    <span>Buyer info</span>
                                    <small class="display-block">"Fill buyer info"</small>
                                }
                                else
                                {
                                    <span>Member info</span>
                                    <small class="display-block">"Fill member info"</small>
                                }
                            </h6>

                            <div class="row">
                                <div class="col-md-12">
                                    <div class="form-group has-feedback">
                                        @Html.Label("Company Name")
                                        @Html.TextBoxFor(x => x.Name, new { @class = "form-control", tabindex = 1, placeholder = "Affiliate name", required = "required", maxlength = "50" })
                                        <div class="form-control-feedback">
                                            <i class="icon-user-plus text-muted"></i>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="row">
                                <div class="col-md-6">
                                    <div class="form-group has-feedback">
                                        @Html.Label("Address line 1")
                                        @Html.TextBoxFor(x => x.AddressLine1, new { @class = "form-control", autofocus = "autofocus", tabindex = 1, placeholder = "Address line1", required = "required", maxlength = "150" })
                                        <div class="form-control-feedback">
                                            <i class="icon-user-plus text-muted"></i>
                                        </div>
                                    </div>
                                </div>

                                <div class="col-md-6">
                                    <div class="form-group has-feedback">
                                        @Html.Label("Address line 2")
                                        @Html.TextBoxFor(x => x.AddressLine2, new { @class = "form-control", autofocus = "autofocus", tabindex = 1, placeholder = "Address line2", maxlength = "150" })
                                        <div class="form-control-feedback">
                                            <i class="icon-user-plus text-muted"></i>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="row">
                                <div class="col-md-3">
                                    <div class="form-group has-feedback">
                                        @Html.LabelFor(x => x.City)
                                        @Html.TextBoxFor(x => x.City, new { @class = "form-control", autofocus = "autofocus", tabindex = 1, placeholder = "City", required = "required", maxlength = "100" })
                                        <div class="form-control-feedback">
                                            <i class="icon-user-plus text-muted"></i>
                                        </div>
                                    </div>
                                </div>

                                <div class="col-md-3">
                                    <div class="form-group has-feedback">
                                        @Html.Label("Zip code")<br />
                                        @Html.TextBoxFor(x => x.ZipPostalCode, new { @class = "form-control", tabindex = 1, placeholder = "Zip postal code", required = "required", maxlength = "20" })
                                        <div class="form-control-feedback">
                                            <i class="icon-user-plus text-muted"></i>
                                        </div>
                                    </div>
                                </div>

                                <div class="col-md-3">
                                    <div class="form-group has-feedback">
                                        @Html.Label("Company Phone")
                                        @Html.TextBoxFor(x => x.CompanyPhone, new { @class = "form-control", tabindex = 1, placeholder = "Telephone", required = "required", maxlength = "50" })
                                        <div class="form-control-feedback">
                                            <i class="icon-user-plus text-muted"></i>
                                        </div>
                                    </div>
                                </div>

                                <div class="col-md-3">
                                    <div class="form-group has-feedback">
                                        @Html.Label("Company Email")
                                        @Html.TextBoxFor(x => x.CompanyEmail, new { @class = "form-control", tabindex = 1, placeholder = "Enter Company Email", required = "required", type = "email", maxlength = "100" })
                                        <div class="form-control-feedback">
                                            <i class="icon-user-plus text-muted"></i>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="row">
                                <div class="col-md-6">
                                    <div class="form-group has-feedback">
                                        @Html.Label("Country")
                                        @Html.DropDownList("CountryId", Model.ListCountry, new { @class = "select", required = "required" })
                                    </div>
                                </div>

                                <div class="col-md-6">
                                    <div class="form-group has-feedback">
                                        @Html.Label("State")
                                        @Html.DropDownList("StateProvinceId", Model.ListStateProvince, new { @class = "select", required = "required" })
                                    </div>
                                </div>
                            </div>

                            @if (currentUser.UserTypeId == SharedData.BuiltInUserTypeId || currentUser.UserTypeId == SharedData.NetowrkUserTypeId)
                            {
                                <div class="row">
                                    <div class="col-md-6">
                                        <div class="form-group has-feedback">
                                            @Html.Label("Manager")<br />
                                            @Html.DropDownList("ManagerId", Model.ListUser, new { @class = "select", required = "required" })
                                        </div>
                                    </div>
                                </div>
                            }
                        </fieldset>
                    }

                    <fieldset class="step" id="step2">
                        <h6 class="form-wizard-title text-semibold">
                            <span class="form-wizard-count">2</span>
                            User info
                            <small class="display-block">Tell us a bit about yourself</small>
                        </h6>

                        <div class="row">
                            <div class="col-md-4">
                                <div class="form-group has-feedback">
                                    @Html.LabelFor(x => x.FirstName)
                                    @Html.TextBoxFor(x => x.FirstName, new { @class = "form-control", autofocus = "autofocus", tabindex = 1, placeholder = "First name", required = "required", maxlength = "150" })
                                    <div class="form-control-feedback">
                                        <i class="icon-user-check text-muted"></i>
                                    </div>
                                </div>
                            </div>

                            <div class="col-md-4">
                                <div class="form-group has-feedback">
                                    @Html.LabelFor(x => x.LastName)
                                    @Html.TextBoxFor(x => x.LastName, new { @class = "form-control", autofocus = "autofocus", tabindex = 1, placeholder = "Last name", required = "required", maxlength = "150" })
                                    <div class="form-control-feedback">
                                        <i class="icon-user-plus text-muted"></i>
                                    </div>
                                </div>
                            </div>

                            <div class="col-md-4">
                                <div class="form-group has-feedback">
                                    @Html.LabelFor(x => x.MiddleName)
                                    @Html.TextBoxFor(x => x.MiddleName, new { @class = "form-control", autofocus = "autofocus", tabindex = 1, placeholder = "Middle name", maxlength = "150" })
                                    <div class="form-control-feedback">
                                        <i class="icon-user-check text-muted"></i>
                                    </div>
                                </div>
                            </div>
                        </div>



                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group has-feedback">
                                    @Html.LabelFor(x => x.Phone)
                                    @Html.TextBoxFor(x => x.Phone, new { @class = "form-control", autofocus = "autofocus", tabindex = 1, placeholder = "Phone", required = "required", maxlength = "50" })
                                    <div class="form-control-feedback">
                                        <i class="icon-user-check text-muted"></i>
                                    </div>
                                </div>
                            </div>

                            <div class="col-md-6">
                                <div class="form-group has-feedback">
                                    @Html.Label("Cell Phone")
                                    @Html.TextBoxFor(x => x.CellPhone, new { @class = "form-control", autofocus = "autofocus", tabindex = 1, placeholder = "Cell phone", required = "required", maxlength = "50" })
                                    <div class="form-control-feedback">
                                        <i class="icon-user-plus text-muted"></i>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-4">
                                <div class="form-group has-feedback">
                                    @Html.Label("Email / Username")
                                    @Html.TextBoxFor(x => x.Email, new { @class = "form-control", autofocus = "autofocus", tabindex = 1, placeholder = "Enter Email Address / Username", required = "required", type = "email" })
                                    <div class="form-control-feedback">
                                        <i class="icon-user-plus text-muted"></i>
                                    </div>
                                </div>
                            </div>

                            <div class="col-md-4">
                                <div class="form-group has-feedback">
                                    @Html.Label("Contact email")
                                    @Html.TextBoxFor(x => x.ContactEmail, new { @class = "form-control", autofocus = "autofocus", tabindex = 1, placeholder = "Contact email", type = "email" })
                                    <div class="form-control-feedback">
                                        <i class="icon-user-plus text-muted"></i>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group has-feedback">
                                    @Html.LabelFor(x => x.Password)
                                    @Html.TextBoxFor(x => x.Password, new { @class = "form-control", tabindex = 1, placeholder = "Password", required = "required", type = "password" })
                                    <div class="form-control-feedback">
                                        <i class="icon-user-lock text-muted"></i>
                                    </div>
                                </div>
                                @{ Html.RenderAction("PasswordStrength", "User", new { id = "Password" }); }
                            </div>

                            <div class="col-md-6">
                                <div class="form-group has-feedback">
                                    @Html.LabelFor(x => x.ConfirmPassword)
                                    @Html.TextBoxFor(x => x.ConfirmPassword, new { @class = "form-control", tabindex = 1, placeholder = "Confirm password", required = "required", type = "password" })
                                    <div class="form-control-feedback">
                                        <i class="icon-user-lock text-muted"></i>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            @{
                                bool isGlobalAdmin = false;
                                string n = "12";

                                if (Model.LoggedInUser != null)
                                {
                                    var role = (from x in Model.LoggedInUser.Roles
                                                where x.Id == 1
                                                select x).FirstOrDefault();

                                    isGlobalAdmin = role != null;

                                    if (isGlobalAdmin) { n = "6"; };
                                }
                            }
                            @if (isGlobalAdmin) {
                            <div class="col-md-6">
                                <div class="form-group has-feedback">
                                    @Html.Label("User role")<br />
                                    @Html.DropDownList("UserRoleId", Model.ListUserRole, new { @class = "select", required = "required" })
                                </div>
                            </div>
                            }
                        </div>

                        @if (Model.UserTypeId == SharedData.BuiltInUserTypeId) {
                        <div class="row">
                            <div class="col-md-4">
                                <div class="form-group has-feedback">
                                    @Html.LabelFor(x => x.Comment)
                                    @Html.TextAreaFor(x => x.Comment, new { @class = "form-control", tabindex = 1, placeholder = "Note" })
                                    <div class="form-control-feedback">
                                        <i class="icon-mention text-muted"></i>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group has-feedback">
                                    @Html.Label("White IP List")
                                    @Html.TextAreaFor(x => x.WhiteIp, new { @class = "form-control", tabindex = 1, placeholder = "White IP List" })
                                    <div class="form-control-feedback">
                                        <i class="icon-mention text-muted"></i>
                                    </div>
                                </div>
                            </div>
                        </div>
                        }
                    </fieldset>

                    <div style="color:red">
                        @Html.ValidationSummary()
                    </div>

                    <div class="form-wizard-actions">
                        @Html.HiddenFor(x => x.UserRoleId)
                        @Html.HiddenFor(x => x.UserTypeId)
                        @Html.HiddenFor(x => x.ParentId)
                        @Html.HiddenFor(x => x.AffiliateId)
                        <input class="btn btn-default" id="validation-back" value="Back" type="reset">
                        <input class="btn btn-info" id="validation-next" value="Next" type="submit" onclick="if ($(this).val() == 'Submit') return validatePassword(); return true;">
                    </div>
                    </div>
                </div>
            </div>
    </div>
}