@model Adrack.Web.ContentManagement.Models.Lead.BuyerModel

@using Adrack.Service.Security
@using Adrack.Core.Infrastructure

@{
    Html.AppendPageScript(PageLayoutPosition.Body, string.Format("~/Scripts/plugins/select2.min.js").ToLowerInvariant());
//    Html.AppendPageScript(PageLayoutPosition.Body, string.Format("~/Scripts/plugins/forms/styling/switchery.min.js").ToLowerInvariant());
    Html.AppendPageScript(PageLayoutPosition.Body, string.Format("~/Scripts/plugins/forms/styling/switch.min.js").ToLowerInvariant());
    Html.AppendPageScript(PageLayoutPosition.Body, string.Format("~/Scripts/plugins/tables/datatables/datatables.min.js").ToLowerInvariant());

/*
    Html.AppendPageScript(PageLayoutPosition.Body, string.Format("~/Scripts/plugins/loaders/pace.min.js").ToLowerInvariant());
    Html.AppendPageScript(PageLayoutPosition.Body, string.Format("~/Scripts/core/libraries/bootstrap.min.js").ToLowerInvariant());
    Html.AppendPageScript(PageLayoutPosition.Body, string.Format("~/Scripts/plugins/loaders/blockui.min.js").ToLowerInvariant());

    Html.AppendPageScript(PageLayoutPosition.Body, string.Format("~/Scripts/core/app.js").ToLowerInvariant());
*/

    var permissionService = AppEngineContext.Current.Resolve<IPermissionService>();

}

<script>
    $(function () {

        $("#@Html.FieldIdFor(x => x.CountryId)").change(function () {
            var selectedItem = $(this).val();

            var ddlStates = $("#@Html.FieldIdFor(x => x.StateProvinceId)");

            var statesProgress = $("#states-loading-progress");
            statesProgress.show();
            $.ajax({
                cache: false,
                type: "GET",
                url: "@(Url.RouteUrl("GetStateProvinceByCountryId"))",
                data: { "countryId": selectedItem, "addSelectStateProvinceItem": "true" },
                success: function (data) {
                    ddlStates.html('');
                    $.each(data, function (id, option) {
                        if (option.id == 0) option.id = "";
                        ddlStates.append($('<option></option>').val(option.id).html(option.name));
                    });
                    statesProgress.hide();
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    statesProgress.hide();
                }
            });
        });

        $('.select').select2();

        var elems = document.querySelectorAll('.switchery');
        for (var i = 0; i < elems.length; i++) {
            var switchery = new Switchery(elems[i]);
        }
    });
</script>

    <div class="panel-body">
        <div>
            <div class="row">
                <div class="col-md-12">
                    <div class="form-group has-feedback">
                        @Html.LabelFor(x => x.Name)
                        @Html.TextBoxFor(x => x.Name, new { @class = "form-control", tabindex = 1, placeholder = "Buyer name", required = "required" })
                        <div class="form-control-feedback">
                            <i class="icon-user-plus text-muted"></i>
                        </div>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-md-6">
                    <div class="form-group has-feedback">
                        @Html.LabelFor(x => x.AddressLine1)
                        @Html.TextBoxFor(x => x.AddressLine1, new { @class = "form-control", autofocus = "autofocus", tabindex = 1, placeholder = "Address line1", required = "required" })
                        <div class="form-control-feedback">
                            <i class="icon-user-plus text-muted"></i>
                        </div>
                    </div>
                </div>

                <div class="col-md-6">
                    <div class="form-group has-feedback">
                        @Html.LabelFor(x => x.AddressLine2)
                        @Html.TextBoxFor(x => x.AddressLine2, new { @class = "form-control", autofocus = "autofocus", tabindex = 1, placeholder = "Address line2" })
                        <div class="form-control-feedback">
                            <i class="icon-user-plus text-muted"></i>
                        </div>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-md-3">
                    <div class="form-group has-feedback">
                        @Html.LabelFor(x => x.City)
                        @Html.TextBoxFor(x => x.City, new { @class = "form-control", autofocus = "autofocus", tabindex = 1, placeholder = "City", required = "required" })
                        <div class="form-control-feedback">
                            <i class="icon-user-plus text-muted"></i>
                        </div>
                    </div>
                </div>

                <div class="col-md-3">
                    <div class="form-group has-feedback">
                        @Html.Label("Company email")
                        @Html.TextBoxFor(x => x.Email, new { @class = "form-control", autofocus = "autofocus", tabindex = 1, placeholder = "City", required = "required" })
                        <div class="form-control-feedback">
                            <i class="icon-user-plus text-muted"></i>
                        </div>
                    </div>
                </div>

                <div class="col-md-3">
                    <div class="form-group has-feedback">
                        @Html.LabelFor(x => x.ZipPostalCode)
                        @Html.TextBoxFor(x => x.ZipPostalCode, new { @class = "form-control", tabindex = 1, placeholder = "Zip postal code", required = "required" })
                        <div class="form-control-feedback">
                            <i class="icon-user-plus text-muted"></i>
                        </div>
                    </div>
                </div>

                <div class="col-md-3">
                    <div class="form-group has-feedback">
                        @Html.Label("Company phone")
                        @Html.TextBoxFor(x => x.Phone, new { @class = "form-control", tabindex = 1, placeholder = "Telephone", required = "required" })
                        <div class="form-control-feedback">
                            <i class="icon-user-plus text-muted"></i>
                        </div>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-md-6">
                    <div class="form-group has-feedback">
                        @Html.Label("Country")<br />
                        @Html.DropDownList("CountryId", Model.ListCountry, new { @class = "select", required = "required" })
                    </div>
                </div>

                <div class="col-md-6">
                    <div class="form-group has-feedback">
                        @Html.Label("State/Province")<br />
                        @Html.DropDownList("StateProvinceId", Model.ListStateProvince, new { @class = "select", required = "required" })
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-md-6">
                    <div class="form-group has-feedback">
                        @Html.Label("Manager")<br />
                        @Html.DropDownList("ManagerId", Model.ListUser, new { @class = "select", required = "required" })
                    </div>
                </div>

                <div class="col-md-6">
                    <div class="form-group has-feedback">
                        @Html.Label("Status")<br />
                        @Html.DropDownList("Status", Model.ListStatus, new { @class = "select", required = "required" })
                    </div>
                </div>
            </div>
        </div>
    </div>